{"ast":null,"code":"import _objectSpread from\"D:/MyGame/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// (생략된 import 및 기본 설정은 유지)\nimport React,{useEffect,useRef,useState,useCallback}from'react';// 테트리스 블록 타입 정의\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// 블록 모양 정의\nconst BLOCKS={I:[[1,1,1,1]],O:[[1,1],[1,1]],T:[[0,1,0],[1,1,1]],L:[[1,0],[1,0],[1,1]],J:[[0,1],[0,1],[1,1]],S:[[0,1,1],[1,1,0]],Z:[[1,1,0],[0,1,1]]};// 블록 색상 정의\nconst COLORS={I:'#00f0f0',O:'#f0f000',T:'#a000f0',L:'#f0a000',J:'#0000f0',S:'#00f000',Z:'#f00000'};// 게임 보드 크기\nconst BOARD_WIDTH=10;const BOARD_HEIGHT=20;const BLOCK_SIZE=30;const TetrisGame=()=>{const canvasRef=useRef(null);const[gameOver,setGameOver]=useState(false);const[score,setScore]=useState(0);const[isPlaying,setIsPlaying]=useState(false);const[lockDelayTimer,setLockDelayTimer]=useState(null);const[board,setBoard]=useState(Array(BOARD_HEIGHT).fill(null).map(()=>Array(BOARD_WIDTH).fill(0)));const[currentBlock,setCurrentBlock]=useState(null);const createNewBlock=useCallback(()=>{const types=['I','O','T','L','J','S','Z'];const type=types[Math.floor(Math.random()*types.length)];const shape=BLOCKS[type];setCurrentBlock({type,position:{x:Math.floor(BOARD_WIDTH/2)-Math.floor(shape[0].length/2),y:0},shape});},[]);const handleGameOver=useCallback(()=>{setGameOver(true);setIsPlaying(false);setScore(0);},[]);const startGame=useCallback(()=>{setBoard(Array(BOARD_HEIGHT).fill(null).map(()=>Array(BOARD_WIDTH).fill(0)));setScore(0);setGameOver(false);setIsPlaying(true);createNewBlock();},[createNewBlock]);const isValidMove=useCallback((position,shape)=>{for(let y=0;y<shape.length;y++){for(let x=0;x<shape[y].length;x++){if(shape[y][x]){const boardX=position.x+x;const boardY=position.y+y;if(boardX<0||boardX>=BOARD_WIDTH||boardY>=BOARD_HEIGHT||boardY>=0&&board[boardY][boardX]){return false;}}}}return true;},[board]);const placeBlock=useCallback(()=>{if(!currentBlock)return;const newBoard=[...board];for(let y=0;y<currentBlock.shape.length;y++){for(let x=0;x<currentBlock.shape[y].length;x++){if(currentBlock.shape[y][x]){const boardY=currentBlock.position.y+y;const boardX=currentBlock.position.x+x;if(boardY<0||boardY<BOARD_HEIGHT&&newBoard[boardY][boardX]===1){handleGameOver();return;}if(boardY<BOARD_HEIGHT){newBoard[boardY][boardX]=1;}}}}setBoard(newBoard);checkLines(newBoard);createNewBlock();},[currentBlock,board,createNewBlock,handleGameOver]);const moveBlock=useCallback((dx,dy)=>{if(!currentBlock||gameOver)return;const newPosition={x:currentBlock.position.x+dx,y:currentBlock.position.y+dy};if(isValidMove(newPosition,currentBlock.shape)){setCurrentBlock(_objectSpread(_objectSpread({},currentBlock),{},{position:newPosition}));if(dy>0&&lockDelayTimer){clearTimeout(lockDelayTimer);setLockDelayTimer(null);}}else if(dy>0){if(!lockDelayTimer){const timer=setTimeout(()=>{placeBlock();setLockDelayTimer(null);},500);setLockDelayTimer(timer);}}},[currentBlock,gameOver,isValidMove,placeBlock,lockDelayTimer]);const rotateBlock=useCallback(()=>{if(!currentBlock||gameOver)return;const rotated=currentBlock.shape[0].map((_,i)=>currentBlock.shape.map(row=>row[i]).reverse());if(isValidMove(currentBlock.position,rotated)){setCurrentBlock(_objectSpread(_objectSpread({},currentBlock),{},{shape:rotated}));if(lockDelayTimer){clearTimeout(lockDelayTimer);setLockDelayTimer(null);}}},[currentBlock,gameOver,isValidMove,lockDelayTimer]);const checkLines=useCallback(newBoard=>{let linesCleared=0;for(let y=BOARD_HEIGHT-1;y>=0;y--){if(newBoard[y].every(cell=>cell===1)){newBoard.splice(y,1);newBoard.unshift(Array(BOARD_WIDTH).fill(0));linesCleared++;y++;}}if(linesCleared>0){setScore(prev=>prev+linesCleared*100);setBoard(newBoard);}},[]);const hardDrop=useCallback(()=>{if(!currentBlock||gameOver)return;let dropDistance=0;const shape=currentBlock.shape;const startPosition=currentBlock.position;while(isValidMove({x:startPosition.x,y:startPosition.y+dropDistance+1},shape)){dropDistance++;}const finalPosition={x:startPosition.x,y:startPosition.y+dropDistance};const newBoard=[...board];for(let y=0;y<shape.length;y++){for(let x=0;x<shape[y].length;x++){if(shape[y][x]){const boardX=finalPosition.x+x;const boardY=finalPosition.y+y;if(boardY<0||boardY<BOARD_HEIGHT&&newBoard[boardY][boardX]===1){handleGameOver();return;}if(boardY<BOARD_HEIGHT){newBoard[boardY][boardX]=1;}}}}setBoard(newBoard);checkLines(newBoard);createNewBlock();},[currentBlock,board,gameOver,isValidMove,handleGameOver,checkLines,createNewBlock]);useEffect(()=>{if(!isPlaying)return;const dropInterval=setInterval(()=>{if(!lockDelayTimer){moveBlock(0,1);}},1000);return()=>clearInterval(dropInterval);},[isPlaying,moveBlock,lockDelayTimer]);useEffect(()=>{const handleKeyPress=e=>{if(!isPlaying)return;switch(e.key){case'ArrowLeft':moveBlock(-1,0);break;case'ArrowRight':moveBlock(1,0);break;case'ArrowDown':moveBlock(0,1);break;case'ArrowUp':rotateBlock();break;case' ':hardDrop();break;}};window.addEventListener('keydown',handleKeyPress);return()=>window.removeEventListener('keydown',handleKeyPress);},[isPlaying,moveBlock,rotateBlock,hardDrop]);useEffect(()=>{const canvas=canvasRef.current;if(!canvas)return;const ctx=canvas.getContext('2d');if(!ctx)return;ctx.clearRect(0,0,canvas.width,canvas.height);for(let y=0;y<BOARD_HEIGHT;y++){for(let x=0;x<BOARD_WIDTH;x++){if(board[y][x]){ctx.fillStyle='#666';ctx.fillRect(x*BLOCK_SIZE,y*BLOCK_SIZE,BLOCK_SIZE-1,BLOCK_SIZE-1);}}}if(currentBlock){ctx.fillStyle=COLORS[currentBlock.type];for(let y=0;y<currentBlock.shape.length;y++){for(let x=0;x<currentBlock.shape[y].length;x++){if(currentBlock.shape[y][x]){ctx.fillRect((currentBlock.position.x+x)*BLOCK_SIZE,(currentBlock.position.y+y)*BLOCK_SIZE,BLOCK_SIZE-1,BLOCK_SIZE-1);}}}}},[board,currentBlock]);return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-4xl font-bold mb-4\",children:\"\\uD14C\\uD2B8\\uB9AC\\uC2A4\"}),/*#__PURE__*/_jsx(\"div\",{className:\"mb-4\",children:/*#__PURE__*/_jsxs(\"p\",{className:\"text-xl\",children:[\"\\uC810\\uC218: \",score]})}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:BOARD_WIDTH*BLOCK_SIZE,height:BOARD_HEIGHT*BLOCK_SIZE,className:\"border-2 border-gray-600\"}),!isPlaying&&/*#__PURE__*/_jsx(\"button\",{onClick:startGame,className:\"mt-4 px-6 py-2 bg-blue-500 hover:bg-blue-600 rounded-lg\",children:gameOver?'다시 시작':'게임 시작'}),gameOver&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-4 text-red-500 text-xl\",children:\"\\uAC8C\\uC784 \\uC624\\uBC84!\"})]});};export default TetrisGame;","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","jsx","_jsx","jsxs","_jsxs","BLOCKS","I","O","T","L","J","S","Z","COLORS","BOARD_WIDTH","BOARD_HEIGHT","BLOCK_SIZE","TetrisGame","canvasRef","gameOver","setGameOver","score","setScore","isPlaying","setIsPlaying","lockDelayTimer","setLockDelayTimer","board","setBoard","Array","fill","map","currentBlock","setCurrentBlock","createNewBlock","types","type","Math","floor","random","length","shape","position","x","y","handleGameOver","startGame","isValidMove","boardX","boardY","placeBlock","newBoard","checkLines","moveBlock","dx","dy","newPosition","_objectSpread","clearTimeout","timer","setTimeout","rotateBlock","rotated","_","i","row","reverse","linesCleared","every","cell","splice","unshift","prev","hardDrop","dropDistance","startPosition","finalPosition","dropInterval","setInterval","clearInterval","handleKeyPress","e","key","window","addEventListener","removeEventListener","canvas","current","ctx","getContext","clearRect","width","height","fillStyle","fillRect","className","children","ref","onClick"],"sources":["D:/MyGame/src/components/TetrisGame.tsx"],"sourcesContent":["// (생략된 import 및 기본 설정은 유지)\r\n\r\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\r\n\r\n// 테트리스 블록 타입 정의\r\ntype BlockType = 'I' | 'O' | 'T' | 'L' | 'J' | 'S' | 'Z';\r\n\r\n// 블록 모양 정의\r\nconst BLOCKS = {\r\n    I: [[1, 1, 1, 1]],\r\n    O: [[1, 1], [1, 1]],\r\n    T: [[0, 1, 0], [1, 1, 1]],\r\n    L: [[1, 0], [1, 0], [1, 1]],\r\n    J: [[0, 1], [0, 1], [1, 1]],\r\n    S: [[0, 1, 1], [1, 1, 0]],\r\n    Z: [[1, 1, 0], [0, 1, 1]]\r\n};\r\n\r\n// 블록 색상 정의\r\nconst COLORS = {\r\n    I: '#00f0f0',\r\n    O: '#f0f000',\r\n    T: '#a000f0',\r\n    L: '#f0a000',\r\n    J: '#0000f0',\r\n    S: '#00f000',\r\n    Z: '#f00000'\r\n};\r\n\r\n// 게임 보드 크기\r\nconst BOARD_WIDTH = 10;\r\nconst BOARD_HEIGHT = 20;\r\nconst BLOCK_SIZE = 30;\r\n\r\nconst TetrisGame: React.FC = () => {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [lockDelayTimer, setLockDelayTimer] = useState<NodeJS.Timeout | null>(null);\r\n\r\n    const [board, setBoard] = useState<number[][]>(\r\n        Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0))\r\n    );\r\n    const [currentBlock, setCurrentBlock] = useState<{\r\n        type: BlockType;\r\n        position: { x: number; y: number };\r\n        shape: number[][];\r\n    } | null>(null);\r\n\r\n    const createNewBlock = useCallback(() => {\r\n        const types: BlockType[] = ['I', 'O', 'T', 'L', 'J', 'S', 'Z'];\r\n        const type = types[Math.floor(Math.random() * types.length)];\r\n        const shape = BLOCKS[type];\r\n\r\n        setCurrentBlock({\r\n            type,\r\n            position: { x: Math.floor(BOARD_WIDTH / 2) - Math.floor(shape[0].length / 2), y: 0 },\r\n            shape\r\n        });\r\n    }, []);\r\n\r\n    const handleGameOver = useCallback(() => {\r\n        setGameOver(true);\r\n        setIsPlaying(false);\r\n        setScore(0);\r\n    }, []);\r\n\r\n    const startGame = useCallback(() => {\r\n        setBoard(Array(BOARD_HEIGHT).fill(null).map(() => Array(BOARD_WIDTH).fill(0)));\r\n        setScore(0);\r\n        setGameOver(false);\r\n        setIsPlaying(true);\r\n        createNewBlock();\r\n    }, [createNewBlock]);\r\n\r\n    const isValidMove = useCallback((position: { x: number; y: number }, shape: number[][]) => {\r\n        for (let y = 0; y < shape.length; y++) {\r\n            for (let x = 0; x < shape[y].length; x++) {\r\n                if (shape[y][x]) {\r\n                    const boardX = position.x + x;\r\n                    const boardY = position.y + y;\r\n\r\n                    if (\r\n                        boardX < 0 ||\r\n                        boardX >= BOARD_WIDTH ||\r\n                        boardY >= BOARD_HEIGHT ||\r\n                        (boardY >= 0 && board[boardY][boardX])\r\n                    ) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }, [board]);\r\n\r\n    const placeBlock = useCallback(() => {\r\n        if (!currentBlock) return;\r\n\r\n        const newBoard = [...board];\r\n        for (let y = 0; y < currentBlock.shape.length; y++) {\r\n            for (let x = 0; x < currentBlock.shape[y].length; x++) {\r\n                if (currentBlock.shape[y][x]) {\r\n                    const boardY = currentBlock.position.y + y;\r\n                    const boardX = currentBlock.position.x + x;\r\n\r\n                    if (boardY < 0 || (boardY < BOARD_HEIGHT && newBoard[boardY][boardX] === 1)) {\r\n                        handleGameOver();\r\n                        return;\r\n                    }\r\n\r\n                    if (boardY < BOARD_HEIGHT) {\r\n                        newBoard[boardY][boardX] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setBoard(newBoard);\r\n        checkLines(newBoard);\r\n        createNewBlock();\r\n    }, [currentBlock, board, createNewBlock, handleGameOver]);\r\n\r\n    const moveBlock = useCallback((dx: number, dy: number) => {\r\n        if (!currentBlock || gameOver) return;\r\n\r\n        const newPosition = {\r\n            x: currentBlock.position.x + dx,\r\n            y: currentBlock.position.y + dy\r\n        };\r\n\r\n        if (isValidMove(newPosition, currentBlock.shape)) {\r\n            setCurrentBlock({ ...currentBlock, position: newPosition });\r\n            if (dy > 0 && lockDelayTimer) {\r\n                clearTimeout(lockDelayTimer);\r\n                setLockDelayTimer(null);\r\n            }\r\n        } else if (dy > 0) {\r\n            if (!lockDelayTimer) {\r\n                const timer = setTimeout(() => {\r\n                    placeBlock();\r\n                    setLockDelayTimer(null);\r\n                }, 500);\r\n                setLockDelayTimer(timer);\r\n            }\r\n        }\r\n    }, [currentBlock, gameOver, isValidMove, placeBlock, lockDelayTimer]);\r\n\r\n    const rotateBlock = useCallback(() => {\r\n        if (!currentBlock || gameOver) return;\r\n\r\n        const rotated = currentBlock.shape[0].map((_, i) =>\r\n            currentBlock.shape.map(row => row[i]).reverse()\r\n        );\r\n\r\n        if (isValidMove(currentBlock.position, rotated)) {\r\n            setCurrentBlock({ ...currentBlock, shape: rotated });\r\n            if (lockDelayTimer) {\r\n                clearTimeout(lockDelayTimer);\r\n                setLockDelayTimer(null);\r\n            }\r\n        }\r\n    }, [currentBlock, gameOver, isValidMove, lockDelayTimer]);\r\n\r\n    const checkLines = useCallback((newBoard: number[][]) => {\r\n        let linesCleared = 0;\r\n\r\n        for (let y = BOARD_HEIGHT - 1; y >= 0; y--) {\r\n            if (newBoard[y].every(cell => cell === 1)) {\r\n                newBoard.splice(y, 1);\r\n                newBoard.unshift(Array(BOARD_WIDTH).fill(0));\r\n                linesCleared++;\r\n                y++;\r\n            }\r\n        }\r\n\r\n        if (linesCleared > 0) {\r\n            setScore(prev => prev + linesCleared * 100);\r\n            setBoard(newBoard);\r\n        }\r\n    }, []);\r\n\r\n    const hardDrop = useCallback(() => {\r\n        if (!currentBlock || gameOver) return;\r\n\r\n        let dropDistance = 0;\r\n        const shape = currentBlock.shape;\r\n        const startPosition = currentBlock.position;\r\n\r\n        while (isValidMove({ x: startPosition.x, y: startPosition.y + dropDistance + 1 }, shape)) {\r\n            dropDistance++;\r\n        }\r\n\r\n        const finalPosition = {\r\n            x: startPosition.x,\r\n            y: startPosition.y + dropDistance\r\n        };\r\n\r\n        const newBoard = [...board];\r\n        for (let y = 0; y < shape.length; y++) {\r\n            for (let x = 0; x < shape[y].length; x++) {\r\n                if (shape[y][x]) {\r\n                    const boardX = finalPosition.x + x;\r\n                    const boardY = finalPosition.y + y;\r\n\r\n                    if (boardY < 0 || (boardY < BOARD_HEIGHT && newBoard[boardY][boardX] === 1)) {\r\n                        handleGameOver();\r\n                        return;\r\n                    }\r\n\r\n                    if (boardY < BOARD_HEIGHT) {\r\n                        newBoard[boardY][boardX] = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setBoard(newBoard);\r\n        checkLines(newBoard);\r\n        createNewBlock();\r\n    }, [currentBlock, board, gameOver, isValidMove, handleGameOver, checkLines, createNewBlock]);\r\n\r\n    useEffect(() => {\r\n        if (!isPlaying) return;\r\n\r\n        const dropInterval = setInterval(() => {\r\n            if (!lockDelayTimer) {\r\n                moveBlock(0, 1);\r\n            }\r\n        }, 1000);\r\n\r\n        return () => clearInterval(dropInterval);\r\n    }, [isPlaying, moveBlock, lockDelayTimer]);\r\n\r\n    useEffect(() => {\r\n        const handleKeyPress = (e: KeyboardEvent) => {\r\n            if (!isPlaying) return;\r\n\r\n            switch (e.key) {\r\n                case 'ArrowLeft':\r\n                    moveBlock(-1, 0);\r\n                    break;\r\n                case 'ArrowRight':\r\n                    moveBlock(1, 0);\r\n                    break;\r\n                case 'ArrowDown':\r\n                    moveBlock(0, 1);\r\n                    break;\r\n                case 'ArrowUp':\r\n                    rotateBlock();\r\n                    break;\r\n                case ' ':\r\n                    hardDrop();\r\n                    break;\r\n            }\r\n        };\r\n\r\n        window.addEventListener('keydown', handleKeyPress);\r\n        return () => window.removeEventListener('keydown', handleKeyPress);\r\n    }, [isPlaying, moveBlock, rotateBlock, hardDrop]);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        if (!canvas) return;\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) return;\r\n\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        for (let y = 0; y < BOARD_HEIGHT; y++) {\r\n            for (let x = 0; x < BOARD_WIDTH; x++) {\r\n                if (board[y][x]) {\r\n                    ctx.fillStyle = '#666';\r\n                    ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE - 1, BLOCK_SIZE - 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (currentBlock) {\r\n            ctx.fillStyle = COLORS[currentBlock.type];\r\n            for (let y = 0; y < currentBlock.shape.length; y++) {\r\n                for (let x = 0; x < currentBlock.shape[y].length; x++) {\r\n                    if (currentBlock.shape[y][x]) {\r\n                        ctx.fillRect(\r\n                            (currentBlock.position.x + x) * BLOCK_SIZE,\r\n                            (currentBlock.position.y + y) * BLOCK_SIZE,\r\n                            BLOCK_SIZE - 1,\r\n                            BLOCK_SIZE - 1\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [board, currentBlock]);\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white\">\r\n            <h1 className=\"text-4xl font-bold mb-4\">테트리스</h1>\r\n            <div className=\"mb-4\">\r\n                <p className=\"text-xl\">점수: {score}</p>\r\n            </div>\r\n            <canvas\r\n                ref={canvasRef}\r\n                width={BOARD_WIDTH * BLOCK_SIZE}\r\n                height={BOARD_HEIGHT * BLOCK_SIZE}\r\n                className=\"border-2 border-gray-600\"\r\n            />\r\n            {!isPlaying && (\r\n                <button\r\n                    onClick={startGame}\r\n                    className=\"mt-4 px-6 py-2 bg-blue-500 hover:bg-blue-600 rounded-lg\"\r\n                >\r\n                    {gameOver ? '다시 시작' : '게임 시작'}\r\n                </button>\r\n            )}\r\n            {gameOver && (\r\n                <div className=\"mt-4 text-red-500 text-xl\">\r\n                    게임 오버!\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TetrisGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}